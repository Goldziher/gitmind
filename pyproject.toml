[project]
name = "gitmind"
version = "0.1.0"
description = "Default template for PDM package"
authors = [{ name = "Na'aman Hirschfeld", email = "nhirschfeld@gmail.com" }]
dependencies = [
    "gitpython>=3.1.43",
    "httpx>=0.27.0",
    "anyio>=4.4.0",
    "msgspec>=0.18.6",
    "python-magic>=0.4.27",
    "jsonschema>=4.22.0",
    "inflection>=0.5.1",
    "semantic-text-splitter>=0.13.3",
    "tree-sitter>=0.22.3",
    "tree-sitter-language-pack>=0.1.2",
    "structlog>=24.2.0",
]
requires-python = "==3.12.*"
readme = "README.md"
license = { text = "UNLICENSED" }

[project.optional-dependencies]
openai = [
    "openai>=1.35.11",
]
groq = [
    "groq>=0.9.0",
]
[tool.pdm]
distribution = false

[tool.pdm.dev-dependencies]
dev = [
    "mypy>=1.10.0",
    "ruff>=0.4.7",
    "pre-commit>=3.7.1",
    "pytest>=8.2.2",
    "pytest-asyncio>=0.23.7",
    "python-dotenv>=1.0.1",
    "types-jsonschema>=4.22.0.20240501",
    "polyfactory>=2.16.0",
    "pytest-logger>=1.1.1",
]

# linters configuration below
[tool.ruff]
line-length = 120
target-version = "py312"
lint.select = [
    "A",   # flake8-builtins
    "B",   # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",   # pycodestyle - warning
    "YTT", # flake8-2020
]
lint.ignore = [
    "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B008", # bugbear - function call parameters init
    "D100", # pydocstyle - missing docstring in public module
    "D104", # pydocstyle - missing docstring in public package
    "D107", # pydocstyle - missing docstring in __init__
    "E203", # whitespace before ':', handled by ruff format
    "E501", # pycodestyle line too long, handled by ruff format
]
src = ["gitmind", "tests", "e2e"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.*" = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "RSE",
    "S",
    "S101",
    "SIM",
    "TCH",
    "TRY",
]
"e2e/**/*.*" = ["S101"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["gitmind", "tests", "e2e"]

[tool.mypy]
packages = ["poly", "tests", "e2e"]
python_version = "3.12"
plugins = ["pydantic.mypy"]

disallow_untyped_decorators = true
disallow_any_unimported = true
untyped_calls_exclude = []

show_error_codes = true
strict = true
warn_unreachable = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_decorators = false
disallow_any_unimported = false
disable_error_code = "method-assign"

[tool.coverage.run]
omit = ["*/tests/*"]
plugins = ["covdefaults"]
source = ["gitmind"]

[tool.coverage.report]
exclude_lines = ['if TYPE_CHECKING:']
fail_under = 100

[tool.pytest.ini_options]
asyncio_mode = "auto"
